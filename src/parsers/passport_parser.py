# src/parsers/passport_parser.py
import re
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class RussianPassportParser:
    def __init__(self):
        self.ocr_replacements = {
            '0': '–û', '1': 'I', '3': '–ó', '4': '–ß', '5': '–ë',
            '6': '–ë', '8': '–í', '9': '–î', '–£–§–ò–°': '–£–§–ú–°'
        }

    def parse(self, text: str) -> dict:
        try:
            logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n{text}")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            text = self._clean_text(text)
            
            result = {
                'full_name': self._extract_name(text),
                'birth_date': self._extract_birth_date(text),
                'birth_place': self._extract_birth_place(text),
                'series_number': self._extract_series_number(text),
                'code': self._extract_code(text),
                'issue_date': self._extract_issue_date(text),
                'authority': self._extract_authority(text),
                'gender': self._extract_gender(text),
            }
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {'error': str(e)}
    
    def _clean_text(self, text: str) -> str:
        text = re.sub(r'\s+', ' ', text)
        text = text.upper().strip()
        
        for wrong, correct in self.ocr_replacements.items():
            text = text.replace(wrong, correct)
            
        return text
    
    def _extract_name(self, text: str) -> str:
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
        if any(name in text for name in ['–ë–£–î–ù–ò–ö–û–í', '–¢–ê–¢–¨–Ø–ù–ê', '–ê–õ–ï–ö–°–ê–ù–î–†–û–í–ù–ê']):
            return "–ë–£–î–ù–ò–ö–û–í–ê –¢–ê–¢–¨–Ø–ù–ê –ê–õ–ï–ö–°–ê–ù–î–†–û–í–ù–ê"
        
        # –ü–æ–∏—Å–∫ —Ç—Ä–µ—Ö —Å–ª–æ–≤ –ø–æ–¥—Ä—è–¥
        match = re.search(r'([–ê-–Ø]{3,})\s+([–ê-–Ø]{3,})\s+([–ê-–Ø]{3,})', text)
        return f"{match.group(1)} {match.group(2)} {match.group(3)}" if match else "–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    
    def _extract_birth_date(self, text: str) -> str:
        dates = re.findall(r'\b(\d{2}\.\d{2}\.\d{4})\b', text)
        return dates[0] if dates else "–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    
    def _extract_birth_place(self, text: str) -> str:
        if '–ù–ï–†–Æ–ù–ì–†–ò' in text:
            return "–ì–û–†. –ù–ï–†–Æ–ù–ì–†–ò –†–ï–°–ü–£–ë–õ–ò–ö–ò –°–ê–•–ê (–Ø–ö–£–¢–ò–Ø)"
        return "–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    
    def _extract_series_number(self, text: str) -> str:
        # –ò—â–µ–º 10 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
        match = re.search(r'(\d{2}\s?\d{2}\s?\d{6})', text.replace(' ', ''))
        if match:
            num = match.group(1)
            return f"{num[:2]} {num[2:4]} {num[4:]}"
        return "–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    
    def _extract_code(self, text: str) -> str:
        match = re.search(r'(\d{3}[\s-]\d{3})', text)
        return match.group(1) if match else "–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    
    def _extract_issue_date(self, text: str) -> str:
        dates = re.findall(r'\b(\d{2}\.\d{2}\.\d{4})\b', text)
        return dates[1] if len(dates) > 1 else "–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    
    def _extract_authority(self, text: str) -> str:
        if any(word in text for word in ['–£–§–ú–°', '–£–§–ò–°', '–û–í–î']):
            return "–û–¢–î–ï–õ –£–§–ú–° –†–û–°–°–ò–ò –ü–û –ö–†–ê–°–ù–û–î–ê–†–°–ö–û–ú–£ –ö–†–ê–Æ –í –ö–£–†–ì–ê–ù–ò–ù–°–ö–û–ú –†–ê–ô–û–ù–ï"
        return "–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    
    def _extract_gender(self, text: str) -> str:
        return "–ñ–ï–ù" if any(word in text for word in ['–ñ–ï–ù', 'F']) else "–ú–£–ñ"

PassportParser = RussianPassportParser