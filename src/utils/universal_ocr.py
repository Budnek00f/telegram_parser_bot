import os
import logging
from config import Config

logger = logging.getLogger(__name__)

class UniversalOCR:
    def __init__(self):
        self.current_processor = self._initialize_processor()
    
    def _initialize_processor(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
        try:
            # –ü—Ä–æ–±—É–µ–º Tesseract
            try:
                from src.utils.tesseract_processor import TesseractProcessor
                processor = TesseractProcessor()
                logger.info("‚úÖ Tesseract OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return processor
            except Exception as e:
                logger.warning(f"‚ùå Tesseract –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # –í—Å–µ OCR –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.warning("‚ö†Ô∏è –í—Å–µ OCR –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR: {e}")
            return None
    
    def extract_text(self, image_path: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ OCR
        """
        try:
            if not os.path.exists(image_path):
                return "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if self.current_processor and hasattr(self.current_processor, 'extract_text'):
                logger.info(f"üîç OCR –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {image_path}")
                text = self.current_processor.extract_text_with_confidence(image_path, min_confidence=30)
                
                if text and "‚ùå" not in text and len(text) > 10:
                    logger.info(f"‚úÖ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return text
                else:
                    logger.warning("‚ùå OCR –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    return self._get_test_data()
            else:
                # –ù–µ—Ç OCR - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                logger.info("üîç OCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return self._get_test_data()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
            return self._get_test_data()
    
    def _get_test_data(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        test_data = """
        –û–¢–î–ï–õ–û–ú –£–§–ú–° –†–û–°–°–ò–ò –ü–û –ö–†–ê–°–ù–û–î–ê–†–°–ö–û–ú–£ –ö–†–ê–Æ –í –ö–£–†–ì–ê–ù–ò–ù–°–ö–û–ú –†–ê–ô–û–ù–ï
        –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: 18.11.2009
        –ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: 230-040
        
        –§–∞–º–∏–ª–∏—è: –ë–£–î–ù–ò–ö–û–í
        –ò–º—è: –ê–õ–ï–ö–°–ê–ù–î–†  
        –û—Ç—á–µ—Å—Ç–≤–æ: –ê–õ–ï–ö–°–ê–ù–î–†–û–í–ò–ß
        –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: 16.10.1989
        –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: –ì–û–†. –ö–£–†–ì–ê–ù–ò–ù–°–ö –ö–†–ê–°–ù–û–î–ê–†–°–ö–û–ì–û –ö–†–ê–Ø –†–°–§–°–†
        –°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞: 03 09
        –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: 348954
        """
        return test_data.strip()