# src/utils/ocr_processor.py
import logging
import sys

logger = logging.getLogger(__name__)

class OCRProcessor:
    def __init__(self):
        self.ocr_type = "Tesseract"
        
        try:
            import pytesseract
            from PIL import Image, ImageEnhance, ImageFilter
            self.pytesseract = pytesseract
            self.Image = Image
            self.ImageEnhance = ImageEnhance
            self.ImageFilter = ImageFilter
            logger.info("‚úÖ Tesseract –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            logger.error(f"‚ùå Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
            self.ocr_type = "None"

    def _preprocess_image(self, image_path: str):
        """–£–ª—É—á—à–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = self.Image.open(image_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
            if image.mode != 'L':
                image = image.convert('L')
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            enhancer = self.ImageEnhance.Contrast(image)
            image = enhancer.enhance(2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
            enhancer = self.ImageEnhance.Sharpness(image)
            image = enhancer.enhance(2.0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
            image = image.filter(self.ImageFilter.MedianFilter())
            
            return image
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            return self.Image.open(image_path)

    def extract_text_from_image(self, image_path: str):
        if self.ocr_type == "None":
            return "–û—à–∏–±–∫–∞: Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytesseract pillow && brew install tesseract tesseract-lang"
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            processed_image = self._preprocess_image(image_path)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
            custom_config = r'--oem 3 --psm 6 -l rus+eng'
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = self.pytesseract.image_to_string(processed_image, config=custom_config)
            
            logger.info(f"üìù Tesseract —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if text and len(text.strip()) > 10:
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")
                return text
            else:
                return "–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Tesseract: {e}")
            return f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"