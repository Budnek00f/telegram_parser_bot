# src/utils/document_processor.py
import logging

# –õ–æ–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
ocr_processor = None

try:
    from .ocr_processor import OCRProcessor
    ocr_processor = OCRProcessor()
    logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º EasyOCR –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
except Exception as e:
    logger.warning(f"EasyOCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    try:
        from .tesseract_processor import TesseractOCRProcessor
        ocr_processor = TesseractOCRProcessor()
        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Tesseract –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –ù–∏ –æ–¥–∏–Ω OCR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        ocr_processor = None

from ..parsers.passport_parser import PassportParser

class DocumentProcessor:
    def __init__(self):
        self.parser = PassportParser()
        
    def process_passport_image(self, image_path: str):
        if not ocr_processor:
            return {'error': 'OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        
        try:
            text = ocr_processor.extract_text_from_image(image_path)
            logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if "–û—à–∏–±–∫–∞" in text or "–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω" in text:
                return {'error': text}
            
            result = self.parser.parse(text)
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {'error': str(e)}