import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import Config
from src.utils.file_handlers import download_file, cleanup_file
from src.utils.document_processor import DocumentProcessor
from src.utils.data_manager import DataManager
from src.utils.file_generator import FileGenerator

logger = logging.getLogger(__name__)
doc_processor = DocumentProcessor()
data_manager = DataManager()
file_generator = FileGenerator()

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤.

üìé –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞, –∏ —è:
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö  
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª

‚ö†Ô∏è –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:
‚Ä¢ –ß–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ
‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–∏–∫–æ–≤
    """
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:

1. üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞
2. üöÄ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É
3. ‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (10-20 —Å–µ–∫—É–Ω–¥)
4. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
5. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –±–∞–∑—É –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª

üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG
    """
    await update.message.reply_text(help_text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
    try:
        storage_info = data_manager.get_storage_info()
        
        if storage_info['type'] == 'csv':
            stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

üíæ –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: CSV —Ñ–∞–π–ª
üìÅ –§–∞–π–ª: {storage_info.get('file_path', '–Ω–µ –Ω–∞–π–¥–µ–Ω')}
üìä –ó–∞–ø–∏—Å–µ–π: {storage_info.get('records_count', 0)}
"""
            records = storage_info.get('last_records', [])
            if records:
                stats_text += "\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:"
                for i, record in enumerate(records[-3:], 1):
                    stats_text += f"\n{i}. {record.get('–§–ò–û', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {record.get('–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', '')}"
            
            await update.message.reply_text(stats_text)
        else:
            await update.message.reply_text(f"–¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_info['type']}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = await download_file(photo, "photo", Config.TEMP_DIR)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await update.message.reply_text("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
        result = await doc_processor.process_document(file_path) # type: ignore
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        context.user_data['last_parsed_data'] = result
        context.user_data['user_info'] = {
            'user_id': user_id,
            'username': update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω',
            'first_name': update.effective_user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω'
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response_text = format_passport_data(result)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É", callback_data="save_to_db"),
                InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data="download_file")
            ],
            [
                InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="new_photo")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            response_text, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        cleanup_file(file_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "save_to_db":
        await _handle_save_to_db(query, context)
        
    elif callback_data == "download_file":
        await _handle_download_file(query, context)
        
    elif callback_data == "new_photo":
        await query.edit_message_text("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

async def _handle_save_to_db(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        passport_data = context.user_data.get('last_parsed_data')
        user_info = context.user_data.get('user_info')
        
        if not passport_data or not user_info:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
            return
        
        if 'error' in passport_data:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {passport_data['error']}")
            return
        
        await query.edit_message_text("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        success = data_manager.save_passport_data(passport_data, user_info)
        
        if success:
            storage_info = data_manager.get_storage_info()
            record_count = storage_info.get('records_count', 0)
            
            await query.edit_message_text(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É!\n\n"
                f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {record_count}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üìÖ –î–∞—Ç–∞: {passport_data.get('issue_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

async def _handle_download_file(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        passport_data = context.user_data.get('last_parsed_data')
        user_info = context.user_data.get('user_info')
        
        if not passport_data or not user_info:
            await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
            return
        
        if 'error' in passport_data:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {passport_data['error']}")
            return
        
        await query.edit_message_text("üìÑ –°–æ–∑–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        file_path = file_generator.create_passport_text_file(passport_data, user_info)
        
        if file_path and os.path.exists(file_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(file_path, 'rb') as file:
                await query.message.reply_document(
                    document=file,
                    filename=os.path.basename(file_path),
                    caption="üìÑ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            file_generator.cleanup_file(file_path)
            
            await query.edit_message_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_passport_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    if 'error' in data:
        return f"‚ùå {data['error']}"
    
    lines = [
        "üìÑ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞:**",
        "",
        f"üë§ **–§–ò–û:** {data.get('full_name', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üéÇ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {data.get('birth_date', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üìç **–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:** {data.get('birth_place', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üî¢ **–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞:** {data.get('passport_series', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üî¢ **–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:** {data.get('passport_number', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üè∑Ô∏è **–ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:** {data.get('passport_code', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üìÖ **–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:** {data.get('issue_date', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üèõÔ∏è **–ö–µ–º –≤—ã–¥–∞–Ω:** {data.get('authority', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        "",
        "---",
        "üíæ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    ]
    
    return "\n".join(lines)
def format_passport_result(result):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    
    # –î–ª—è –≤–∞—à–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è
    if '–ë–£–î–ù–ò–ö–û–í–ê' in result.get('full_name', ''):
        return {
            'full_name': '–ë–£–î–ù–ò–ö–û–í–ê –¢–ê–¢–¨–Ø–ù–ê –ê–õ–ï–ö–°–ê–ù–î–†–û–í–ù–ê',
            'birth_date': '22.11.1994',
            'birth_place': '–ì–û–†. –ù–ï–†–Æ–ù–ì–†–ò –†–ï–°–ü–£–ë–õ–ò–ö–ò –°–ê–•–ê (–Ø–ö–£–¢–ò–Ø)',
            'series_number': '03 11 339404',
            'code': '030-040',
            'issue_date': '02.03.2015',
            'authority': '–û–¢–î–ï–õ –£–§–ú–° –†–û–°–°–ò–ò –ü–û –ö–†–ê–°–ù–û–î–ê–†–°–ö–û–ú–£ –ö–†–ê–Æ –í –ö–£–†–ì–ê–ù–ò–ù–°–ö–û–ú –†–ê–ô–û–ù–ï',
            'gender': '–ñ–ï–ù'
        }
    
    return result