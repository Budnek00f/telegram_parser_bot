import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import Config
from src.utils.file_handlers import download_file, cleanup_file
from src.utils.document_processor import DocumentProcessor

logger = logging.getLogger(__name__)
doc_processor = DocumentProcessor()

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

üìé –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø–∞—Å–ø–æ—Ä—Ç–∞), –∏ —è –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç.

‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ:
- –ß–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–∏–∫–æ–≤
    
üõ°Ô∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
    """
    await update.message.reply_text(welcome_text)
    logger.info(f"User {update.effective_user.id} started the bot")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –°–¥–µ–ª–∞–π—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫–∞–Ω—ã
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª –±–æ—Ç—É
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, PDF
    """
    await update.message.reply_text(help_text)
    logger.info(f"User {update.effective_user.id} requested help")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo = update.message.photo[-1]
    
    logger.info(f"Received photo from user {user_id}")
    await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = await download_file(photo, "photo", Config.TEMP_DIR)
        file_size = os.path.getsize(file_path) / 1024
        logger.info(f"Photo saved: {file_path} ({file_size:.2f} KB)")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await update.message.reply_text("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
        result = await doc_processor.process_document(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['last_parsed_data'] = result
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response_text = format_passport_data(result)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã", callback_data="data_correct")],
            [InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="new_photo")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            response_text, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        cleanup_file(file_path)
        
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not update.message.document:
        await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    allowed_types = ['.jpg', '.jpeg', '.png', '.pdf']
    file_ext = os.path.splitext(document.file_name)[1].lower() if document.file_name else ''
    
    if file_ext not in allowed_types:
        await update.message.reply_text(
            f"‚ùå –§–æ—Ä–º–∞—Ç {file_ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(allowed_types)}"
        )
        return
    
    logger.info(f"Received document {document.file_name} from user {user_id}")
    await update.message.reply_text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = await download_file(document, "document", Config.TEMP_DIR)
        file_size = os.path.getsize(file_path) / 1024
        logger.info(f"Document saved: {file_path} ({file_size:.2f} KB)")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await update.message.reply_text("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
        result = await doc_processor.process_document(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data['last_parsed_data'] = result
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response_text = format_passport_data(result)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã", callback_data="data_correct")],
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ñ–∞–π–ª", callback_data="new_photo")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            response_text, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        cleanup_file(file_path)
        
    except Exception as e:
        logger.error(f"Error processing document: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    callback_data = query.data
    
    logger.info(f"Button callback from user {user_id}: {callback_data}")
    
    if callback_data == "data_correct":
        await query.edit_message_text("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! (–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞)")
        
    elif callback_data == "new_photo":
        await query.edit_message_text("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_passport_data(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    if 'error' in data:
        return f"‚ùå {data['error']}"
    
    lines = [
        "üìÑ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞:**",
        "",
        f"üë§ **–§–ò–û:** {data.get('full_name', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üéÇ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {data.get('birth_date', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üìç **–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:** {data.get('birth_place', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üî¢ **–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞:** {data.get('passport_series', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üî¢ **–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:** {data.get('passport_number', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üè∑Ô∏è **–ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:** {data.get('passport_code', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üìÖ **–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:** {data.get('issue_date', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        f"üèõÔ∏è **–ö–µ–º –≤—ã–¥–∞–Ω:** {data.get('authority', '–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ')}",
        "",
        "---",
        "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    ]
    
    return "\n".join(lines)